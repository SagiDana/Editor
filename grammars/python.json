{
    "@": {
        "binary_operator": "keyword.operator"
    },
    "@=": {
        "binary_operator": "keyword.operator"
    },
    "{": {
        "interpolation": "punctuation.section.embedded"
    },
    "}":{
        "interpolation": "punctuation.section.embedded"
    },
    "attribute": {
        "argument_list": {
            "class_definition": "entity.other.inherited-class"
        },
        "keyword_argument": {
            "argument_list": {
                "class_definition": "entity.other.inherited-class"
            }
        }
    },

    "identifier:nth-child(2)": {
        "attribute": [
            {
                "call": "entity.name.function"
            },
            "variable.other.object.property"
        ],
        "keyword_argument": {
            "argument_list": {
                "class_definition": "entity.other.inherited-class"
            }
        }
    },
    "identifier:nth-child(0)": {
        "default_parameter": "variable.parameter.function",
        "keyword_argument": "variable.parameter.function",
        "call": [
            {
                "match": "^(abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|exec|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__)$",
                "scope": "support.function.call"
            },
            {
                "match": "^[A-Z]",
                "scope": "support.type.contructor"
            },
            "entity.name.function.call"
        ]
    },
    "identifier": [
        {
            "match": "^(BaseException|Exception|TypeError|StopAsyncIteration|StopIteration|ImportError|ModuleNotFoundError|OSError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|BlockingIOError|ChildProcessError|FileExistsError|FileNotFoundError|IsADirectoryError|NotADirectoryError|InterruptedError|PermissionError|ProcessLookupError|TimeoutError|EOFError|RuntimeError|RecursionError|NotImplementedError|NameError|UnboundLocalError|AttributeError|SyntaxError|IndentationError|TabError|LookupError|IndexError|KeyError|ValueError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|AssertionError|ArithmeticError|FloatingPointError|OverflowError|ZeroDivisionError|SystemError|ReferenceError|BufferError|MemoryError|Warning|UserWarning|DeprecationWarning|PendingDeprecationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning|BytesWarning|ResourceWarning|GeneratorExit|SystemExit|KeyboardInterrupt)$",
            "scope": "support.type.exception"
        },
        {
                "match": "^(self)",
                "scope": "entity.name.variable.self"
        },
        {
            "class_definition": "entity.name.type.class",
            "function_definition": "entity.name.function.definition",
            "type": "support.storage.type",
            "argument_list": {
                "class_definition": "entity.other.inherited-class"
            },
            "parameters": "variable.parameter.function",
            "list_splat": {
                "parameters": "variable.parameter.function"
            },
            "dictionary_splat": {
                "parameters": "variable.parameter.function"
            },
            "lambda_parameters": "variable.parameter.function",
            "typed_parameter": "variable.parameter.function"
        }
    ],
    "module": "source.python",
    "comment": "comment.line",
    "string": "string.quoted",
    "escape_sequence": "constant.character.escape",
    "interpolation": "meta.embedded",
    "decorator": "entity.name.function.decorator",
    "none": "constant.language",
    "true": "constant.language",
    "false": "constant.language",
    "integer": "constant.numeric",
    "float": "constant.numeric",
    "class": "storage.type.class",
    "def": "storage.type.function",
    "lambda": "storage.type.function",
    "global": "storage.modifier.global",
    "nonlocal": "storage.modifier.nonlocal",
    "argument_list": "meta.method-call.python",
    "if": "keyword.control",
    "else": "keyword.control",
    "elif": "keyword.control",
    "while": "keyword.control",
    "for": "keyword.control",
    "return": "keyword.control",
    "break": "keyword.control",
    "continue": "keyword.control",
    "pass": "keyword.control",
    "raise": "keyword.control",
    "yield": "keyword.control",
    "await": "keyword.control",
    "async": "keyword.control",
    "try": "keyword.control",
    "except": "keyword.control",
    "with": "keyword.control",
    "as": "keyword.control",
    "finally": "keyword.control",
    "import": "keyword.control",
    "from": "keyword.control",
    "print": "keyword.other",
    "assert": "keyword.other",
    "exec": "keyword.other",
    "del": "keyword.other",
    "+": "keyword.operator",
    "-": "keyword.operator",
    "*": "keyword.operator",
    "/": "keyword.operator",
    "%": "keyword.operator",
    "**": "keyword.operator",
    "//": "keyword.operator",
    "==": "keyword.operator",
    "!=": "keyword.operator",
    "<>": "keyword.operator",
    ">": "keyword.operator",
    "<": "keyword.operator",
    ">=": "keyword.operator",
    "<=": "keyword.operator",
    "=": "keyword.operator",
    "+=": "keyword.operator",
    "-=": "keyword.operator",
    "*=": "keyword.operator",
    "/=": "keyword.operator",
    "%=": "keyword.operator",
    "**=": "keyword.operator",
    "//=": "keyword.operator",
    "&": "keyword.operator",
    "|": "keyword.operator",
    "^": "keyword.operator",
    "~": "keyword.operator",
    "<<": "keyword.operator",
    ">>": "keyword.operator",
    "in": "keyword.operator.logical.python",
    "and": "keyword.operator.logical.python",
    "or": "keyword.operator.logical.python",
    "not": "keyword.operator.logical.python",
    "is": "keyword.operator.logical.python",
    "->": "keyword.control.return",
    "[": "punctuation.definition.begin.bracket.square",
    "]": "punctuation.definition.end.bracket.square",
    ",": "punctuation.separator.delimiter",
    "{": "punctuation.section.block.begin.bracket.curly",
    "}": "punctuation.section.block.end.bracket.curly",
    "(": "punctuation.section.parens.begin.bracket.round",
    ")": "punctuation.section.parens.end.bracket.round"
}
